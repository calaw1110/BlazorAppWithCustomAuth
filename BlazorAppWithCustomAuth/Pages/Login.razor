@page "/login"
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>
                User Name
            </label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>
                Password
            </label>
            <input @bind="model.Password" class="form-control" placeholder="User Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Auth" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>


@code {
    private UserAccount model = new();
    private async Task Auth()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if (userAccount != null && userAccount.Password == model.Password)
        {
            var customAuth = (CustomAuthStateProvider)authStateProvider;
            await customAuth.UpdateAuthenticationState(new UserSession
                {
                    UserName = userAccount.UserName,
                    Role = userAccount.Role
                });
            navManager.NavigateTo("/", true);
        }
        else
        {
            await js.InvokeVoidAsync("alert", "登入失敗");
            return;
        }
    }
}
